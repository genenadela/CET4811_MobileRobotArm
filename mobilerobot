/***
 * Autonomous 4DOF Robot
 * Code Description: Control code for Arduino-based mobile robot with arm.
 * Hardware Required: 2-DC Motors with Encoders, L298N Motor Driver
 * IDE version: 1.8.10
 * Programmer name: Gene Nadela
 * November 3, 2019
 * v. 1.0.0
 ***/

// pre-processor directives
#include <VarSpeedServo.h>
#include <math.h>

// pin name definitions

//Motor Control Pins
const int enaPinL = 13; //PWM enable pin for left motor, Grey Wire, ENA-A
const int in1PinL = 12;
const int in2PinL = 11; //Orange Wire
const int enaPinR = 10; //PWM enable pin for right motor, Grey Wire, ENA-B
const int in1PinR = 9;
const int in2PinR = 8; //Orange Wire

//Motor Encoder Pins
const int encAL = 18; //Encoder A, Left Motor
//const int encBL = 19; //Encoder B, Left Motor
const int encAR = 19; //Encoder A, Right Motor
//const int encBR = 21; //Encoder B, Left Motor

//Servo Control Pins
const int servoShoulderPin = 7;
const int servoElbowPin = 6;
const int servoWristRotatePin = 5;
const int servoWristLiftPin = 4;
const int servoGripperPin = 2;

// class/object declarations
VarSpeedServo servoShoulder;
VarSpeedServo servoElbow;
VarSpeedServo servoWristRotation;
VarSpeedServo servoWristLift;
VarSpeedServo servoGripper;
 
// function declarations
void setMotorLeft(int speed, boolean reverse);
void setMotorRight(int speed, boolean reverse);
void fullStop();
void moveForward();
void moveBackward();
void rotateCW();
void rotateCCW();
void translate(float dist);

// global variables
char command; //Receive character commands from remote control system
const float encoderConstant = 3000;
const float encoderConstantAngle = 150;
volatile unsigned long TotalMotorCountL = 0; //initialize left motor encoder count
volatile unsigned long TotalMotorCountR = 0; //initialize right motor encoder count

void setup() {
  // configure hardware peripherals
  //Motor Controls
  pinMode(enaPinL, OUTPUT);
  pinMode(in1PinL, OUTPUT);
  pinMode(in2PinL, OUTPUT);
  pinMode(enaPinR, OUTPUT);
  pinMode(in1PinR, OUTPUT);
  pinMode(in2PinR, OUTPUT);
  
  //MotorEncoder
  pinMode(encAL, INPUT);
  //pinMode(encBL, INPUT);
  pinMode(encAR, INPUT);
  //pinMode(encBR, INPUT);
  
  //MotorEncoder Interrupt Pins
  attachInterrupt(digitalPinToInterrupt(encAL), countLeftMotor, FALLING);
  attachInterrupt(digitalPinToInterrupt(encAR), countRightMotor, FALLING);

  //Servo Motor Control
  servoShoulder.attach(servoShoulderPin);
  servoElbow.attach(servoElbowPin);
  servoWristRotation.attach(servoWristRotatePin);
  servoWristLift.attach(servoWristLiftPin);
  servoGripper.attach(servoGripperPin);

  //Servo Motor Initialized Position
  servoShoulder.write(140, 10, false);
  servoElbow.write(90, 10, false);
  servoWristRotation.write(110, 10, false);
  servoWristLift.write(0, 10, false);
  servoGripper.write(45, 10, false);
  
  // configure data communication
  Serial.begin(115200); //PC Serial Communication for Debugging
  Serial3.begin(9600); //Bluetooth Serial Communication for Remote Control
}

void loop() {

    if (Serial3.available() > 0) {
      command = Serial3.read();
        switch (command) {
        
        case '0':
          fullStop();
          Serial.print("Stop");
        break;
        
        case  '1':
          translate(0.4);
          Serial.print("Forward 40cm");
        break;
        
        case '2':
          translateBackwards(0.4);
          Serial.print("Backward 40cm");
        break;

        case '3':
          rotate(1.57); //CW 90 degrees
          Serial.print("CW 90deg");
        break;

        case '4':
          rotate(-1.57); //CCW 90 degrees
          Serial.print("CCW 90deg");
        break;

        case '5':
          rotate(0.26); //CW 15 degrees
          Serial.print("CW 15deg");
        break;

        case '6':
          rotate(-0.26); //CCW 15 degrees
          Serial.print("CCW 15deg");
        break;

        case '7':
          translate(0.1); //Forward 10 cm
          Serial.print("Forward 10cm");
        break;

        case '8':
          translateBackwards(0.1); //Backward 10 cm
          Serial.print("Backward 10cm");
        break;

        case 'a':
          armReachFront();
        break;

        case 'b':
          armReset();
        break;

        case 'c':
          gripOn();
        break;

        case 'd':
          gripOff();
        break;
        
        default:
        // do nothing for other command values
        break;
        }
    }
}

//Function Definitions

void armReachFront() {
  servoShoulder.write(40, 20, false);
  servoElbow.write(110, 20, false);
  servoWristRotation.write(110, 20, false);
  servoWristLift.write(90, 20, false);
  //servoGripper.write(45, 10, false);
}

void armReset() {
  servoShoulder.write(140, 20, false);
  servoElbow.write(90, 20, false);
  servoWristRotation.write(110, 20, false);
  servoWristLift.write(0, 20, false);
  //servoGripper.write(45, 20, false);
}

void gripOn() {
  servoGripper.write(0, 20, false);
}

void gripOff() {
  servoGripper.write(45, 20, false);
}

void setMotorLeft(int speed, boolean reverse){ //sets velocity of left motor
  analogWrite(enaPinL, speed);
  digitalWrite(in1PinL, !reverse);
  digitalWrite(in2PinL, reverse);
}
void setMotorRight(int speed, boolean reverse){ //sets velocity of right motor
  analogWrite(enaPinR, speed);
  digitalWrite(in1PinR, !reverse);
  digitalWrite(in2PinR, reverse);
}
void moveForward() { //Move Forward
  setMotorLeft(115, false);
  setMotorRight(115, false);
}
void moveBackward() { //Move Backward
  setMotorLeft(100, true);
  setMotorRight(100, true);
}
void rotateCW() { //Rotate Clockwise
  setMotorLeft(127, true);
  setMotorRight(127, false);
}
void rotateCCW() { //Rotate CounterClockwise
  setMotorLeft(127, false);
  setMotorRight(127, true);
}
void fullStop() { //Total Stop Robot
  setMotorLeft(0, false);
  setMotorRight(0, false);
}
void countLeftMotor() {
  TotalMotorCountL++;
}
void countRightMotor() {
  TotalMotorCountR++;
}


void translate(float dist) { //moves robot forward in meters
  float encoderGoal = dist*encoderConstant;
  int encoderTotalCount = 0;
  int speedMotorLeft = 115; //initialize left motor speed
  int speedMotorRight = 100; //initialize right motor speed
  TotalMotorCountL = 0; //initialize encoder value left
  TotalMotorCountR = 0; //initialize encoder value right
  int error = 0; //initialize error
  float kp = 0.5; //constant of proportionality
  while(encoderTotalCount < encoderGoal) {
    setMotorLeft(speedMotorLeft, false);
    setMotorRight(speedMotorRight, false);
    error = TotalMotorCountL - TotalMotorCountR;
    speedMotorRight += error/kp;
    TotalMotorCountL = 0; //initialize encoder value left
    TotalMotorCountR = 0; //initialize encoder value right 
    Serial.print("TotalMotorL: ");
    Serial.print(TotalMotorCountL);
    Serial.print("   TotalMotorR: ");
    Serial.print(TotalMotorCountR);
    Serial.print("   LeftSpeed: ");
    Serial.print(speedMotorLeft);
    Serial.print("   RightSpeed: ");
    Serial.print(speedMotorRight);
    Serial.print("   Error: ");
    Serial.println(error);
    delay(10);
    encoderTotalCount += TotalMotorCountL;
  }
  fullStop();
}

void translateBackwards(float dist) { //moves robot backwards in meters
  float encoderGoal = dist*encoderConstant;
  int encoderTotalCount = 0;
  int speedMotorLeft = 115; //initialize left motor speed
  int speedMotorRight = 100; //initialize right motor speed
  TotalMotorCountL = 0; //initialize encoder value left
  TotalMotorCountR = 0; //initialize encoder value right
  int error = 0; //initialize error
  float kp = 0.5; //constant of proportionality
  while(encoderTotalCount < encoderGoal) {
    setMotorLeft(speedMotorLeft, true);
    setMotorRight(speedMotorRight, true);
    error = TotalMotorCountL - TotalMotorCountR;
    speedMotorRight += error/kp;
    TotalMotorCountL = 0; //initialize encoder value left
    TotalMotorCountR = 0; //initialize encoder value right 
    Serial.print("TotalMotorL: ");
    Serial.print(TotalMotorCountL);
    Serial.print("   TotalMotorR: ");
    Serial.print(TotalMotorCountR);
    Serial.print("   LeftSpeed: ");
    Serial.print(speedMotorLeft);
    Serial.print("   RightSpeed: ");
    Serial.print(speedMotorRight);
    Serial.print("   Error: ");
    Serial.println(error);
    delay(10);
    encoderTotalCount += TotalMotorCountL;
  }
  fullStop();
}

void rotate(float angle) { //rotate robot in radians
  float encoderGoal = fabs(angle*encoderConstantAngle);
  int encoderTotalCount = 0;
  int speedMotorLeft = 115; //initialize left motor speed
  int speedMotorRight = 100; //initialize right motor speed
  TotalMotorCountL = 0; //initialize encoder value left
  TotalMotorCountR = 0; //initialize encoder value right
  int error = 0; //initialize error
  float kp = 0.5; //constant of proportionality

  if (angle >= 0) {
    while(encoderTotalCount < encoderGoal) {
    setMotorLeft(speedMotorLeft, false);
    setMotorRight(speedMotorRight, true);
    error = TotalMotorCountL - TotalMotorCountR;
    speedMotorRight += error/kp;
    TotalMotorCountL = 0; //initialize encoder value left
    TotalMotorCountR = 0; //initialize encoder value right 
    Serial.print("TotalMotorL: ");
    Serial.print(TotalMotorCountL);
    Serial.print("   TotalMotorR: ");
    Serial.print(TotalMotorCountR);
    Serial.print("   LeftSpeed: ");
    Serial.print(speedMotorLeft);
    Serial.print("   RightSpeed: ");
    Serial.print(speedMotorRight);
    Serial.print("   Error: ");
    Serial.println(error);
    delay(10);
    encoderTotalCount += TotalMotorCountL;
    }
  fullStop();
  }
  else {
    while(encoderTotalCount < encoderGoal) {
    setMotorLeft(speedMotorLeft, true);
    setMotorRight(speedMotorRight, false);
    error = TotalMotorCountL - TotalMotorCountR;
    speedMotorRight += error/kp;
    TotalMotorCountL = 0; //initialize encoder value left
    TotalMotorCountR = 0; //initialize encoder value right 
    Serial.print("TotalMotorL: ");
    Serial.print(TotalMotorCountL);
    Serial.print("   TotalMotorR: ");
    Serial.print(TotalMotorCountR);
    Serial.print("   LeftSpeed: ");
    Serial.print(speedMotorLeft);
    Serial.print("   RightSpeed: ");
    Serial.print(speedMotorRight);
    Serial.print("   Error: ");
    Serial.println(error);
    delay(10);
    encoderTotalCount += TotalMotorCountL;
    }
  fullStop();
  }
  
}
